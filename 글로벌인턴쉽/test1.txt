package remind;
import java.util.*;
public class samsung2 {

   public static void main(String[] args) {
      // TODO Auto-generated method stub

      Scanner input = new Scanner(System.in);
      
      int testcasenum = input.nextInt();
      
      
      if(testcasenum>=1 && testcasenum<=50) {
      for(int i=0; i<testcasenum; i++) {
         
      int num = input.nextInt();
      int turnNum = 0;
         if(num>=1 && num<=99999) {
            int a = divide(num, turnNum);
            int s = i+1;
            System.out.println("#"+ s + " " +a);
         }
         
         }
      
      }
      
            
   }

   //int turnNum = 0;
   static int divide(int num, int turnNum) {
      
      if(num < 10) {
         return turnNum;
      }
      else if(num>9 && num<100) {
         
            int one = num%10;
            int ten = (num-one)/10;
            
            int case1 = ten*one;
            turnNum+=1;
            
            int a =divide(case1, turnNum);
         
         return a;
      }
      
      else if(num>99 && num<1000) {
         int one = num%10;
         int ten = ((num-one)%100)/10;
         int hun = (num-ten)/100;
         
         int case1 = hun*(ten*10+one);
         int case2 = (hun*10+ten)*one;
         int case3 = one*ten*hun;
         
         //System.out.println(case2);
         turnNum +=1;
         int a = divide(case1, turnNum);
         int b = divide(case2, turnNum);
         int c = divide(case3, turnNum);
         
         int[] arr = {a,b,c};
         
         mergeSort(arr,3);
         return arr[2];
         
      }
      
      else if(num>999 && num<10000) {
         int one = num%10;
         int ten = ((num-one)%100)/10;
         int hun = (num%1000)/100;
         int ttt = (num)/1000;
         
         //System.out.println(one + " " + ten + " " + hun + " " + ttt);
         int case1 = ttt*(hun*100 + ten*10 + one);
         int case2 = (ttt*10+hun)*(ten*10+one);
         int case3 = (ttt*100+hun*10+ten)*one;
         int case4 = ttt*hun*(ten*10 + one); 
         int case5 = ttt*hun*ten*one;
         int case6 = (ttt*10+hun)*ten*one;
         int case7 = ttt*(hun*10+ten)*one;
         
         turnNum +=1;
         int a = divide(case1, turnNum);
         int b = divide(case2, turnNum);
         int c = divide(case3, turnNum);
         int d = divide(case4, turnNum);
         int e = divide(case5, turnNum);
         int f = divide(case6, turnNum);
         int g = divide(case7, turnNum);
         
         int[] arr = {a,b,c,d,e,f,g};
         //System.out.println(a + " " + b + " "+c );
         mergeSort(arr,7);
         return arr[6];
      }
      
      else if(num>9999 && num<100000) {
         
         int e = num%10;
         int d = ((num-e)%100)/10;
         int c = (num%1000)/100;
         int b = ((num)/1000)%10;
         int a = (num)/10000;
         
         int case1= a*(b*1000+c*100+d*10+e);
         int case2 = a*b*(c*100+d*10+e);
         int case3 = a*b*c*(d*10+e);
         int case4 = a*b*(c*10+d)*e;
         int case5 = a*b*c*d*e;
         int case6 = a*(b*10+c)*(d*10+e);
         int case7 = a*(b*10+c)*d*e;
         int case8 = a*(b*100+c*10+d)*e;
         int case9 = (a*10+b)*(c*100+d*10+e);
         int case10 = (a*10+b)*c*(d*10+e);
         int case11 = (a*10+b)*(c*10+d)*e;
         
         int case12 = (a*10+b)*c*d*e;
         int case13 = (a*100+b*10+c)*(d*10+e);
         int case14 = (a*100+b*10+c)*d*e;
         int case15 = (a*1000+b*100+c*10+d)*e;
         
         
         
         
         turnNum +=1;
         int aa = divide(case1, turnNum);
         int bb = divide(case2, turnNum);
         int cc = divide(case3, turnNum);
         int dd = divide(case4, turnNum);
         int ee = divide(case5, turnNum);
         int ff = divide(case6, turnNum);
         int g = divide(case7, turnNum);
         int h = divide(case8, turnNum);
         int i = divide(case9, turnNum);
         int j = divide(case10, turnNum);
         int k = divide(case11, turnNum);
         int l = divide(case12, turnNum);
         int m = divide(case13, turnNum);
         int n = divide(case14, turnNum);
         int o = divide(case15, turnNum);
         
         int[] arr = {aa,bb,cc,dd,ee,ff,g,h,i,j,k,l,m,n,o};
         
         mergeSort(arr,15);
         //System.out.println(arr[0] + " " + arr[1] + " " + arr[2] + " "+ arr[3]);
         return arr[14];
      }
         
      
      
      
      return 0;
   }
   
   static void mergeSort(int[] a, int n) {
       if (n < 2) {
           return;
       }
       int mid = n / 2;
       int[] l = new int[mid];
       int[] r = new int[n - mid];

       for (int i = 0; i < mid; i++) {
           l[i] = a[i];
       }
       for (int i = mid; i < n; i++) {
           r[i - mid] = a[i];
       }
       mergeSort(l, mid);
       mergeSort(r, n - mid);

       merge(a, l, r, mid, n - mid);
   }
   public static void merge(int[] a, int[] l, int[] r, int left, int right) {
          
             int i = 0, j = 0, k = 0;
             while (i < left && j < right) {
                 if (l[i] <= r[j]) {
                     a[k++] = l[i++];
                 }
                 else {
                     a[k++] = r[j++];
                 }
             }
             while (i < left) {
                 a[k++] = l[i++];
             }
             while (j < right) {
                 a[k++] = r[j++];
             }
         }
}