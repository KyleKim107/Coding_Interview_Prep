#include <iostream> using namespace std; const int EMPTY = 0; const int GOAL = 5; const int MAX = 19; int board[MAX][MAX]; void printResult(int y, int x) { cout << board[y][x] << "\n"; cout << y + 1 << " " << x + 1 << "\n"; exit(0); } void checkRow(void) { for (int y = 0; y < MAX; y++) { for (int x = 0; x <= MAX - GOAL; x++) { if (board[y][x] == EMPTY) { continue; } int cnt; for (cnt = 1; cnt < GOAL; cnt++) { if (board[y][x] != board[y][x + cnt]) { break; } } if (cnt != GOAL) { continue; } if ((x == MAX - GOAL || board[y][x + GOAL] != board[y][x]) && (x == 0 || board[y][x - 1] != board[y][x])) { printResult(y, x); } } } } void checkCol(void) { for (int x = 0; x < MAX; x++) { for (int y = 0; y <= MAX - GOAL; y++) { if (board[y][x] == EMPTY) { continue; } int cnt; for (cnt = 1; cnt < GOAL; cnt++) { if (board[y][x] != board[y + cnt][x]) { break; } } if (cnt != GOAL) { continue; } if ((y == MAX - GOAL || board[y + GOAL][x] != board[y][x]) && (y == 0 || board[y - 1][x] != board[y][x])) { printResult(y, x); } } } } void checkUpperDiagonal(void) { for (int x = 0; x <= MAX - GOAL; x++) { for (int y = GOAL - 1; y < MAX; y++) { if (board[y][x] == EMPTY) { continue; } int cnt; for (cnt = 1; cnt < GOAL; cnt++) { if (board[y][x] != board[y - cnt][x + cnt]) { break; } } if (cnt != GOAL) { continue; } if ((y == GOAL - 1 || x == MAX - GOAL || board[y - GOAL][x + GOAL] != board[y][x]) && (y == MAX - GOAL || x == 0 || board[y + 1][x - 1] != board[y][x])) { printResult(y, x); } } } } void checkLowerDiagonal(void) { for (int y = 0; y <= MAX - GOAL; y++) { for (int x = 0; x <= MAX - GOAL; x++) { if (board[y][x] == EMPTY) { continue; } int cnt; for (cnt = 1; cnt < GOAL; cnt++) { if (board[y][x] != board[y + cnt][x + cnt]) { break; } } if (cnt != GOAL) { continue; } if ((y == MAX - GOAL || x == MAX - GOAL || board[y + GOAL][x + GOAL] != board[y][x]) && (y == 0 || x == 0 || board[y - 1][x - 1] != board[y][x])) { printResult(y, x); } } } } int main(void) { ios_base::sync_with_stdio(0); cin.tie(0); for (int i = 0; i < MAX; i++) { for (int j = 0; j < MAX; j++) { cin >> board[i][j]; } } checkRow(); checkCol(); checkUpperDiagonal(); checkLowerDiagonal(); cout << 0 << "\n"; return 0; }

